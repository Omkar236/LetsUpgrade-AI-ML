{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter the comma sepated elementsassa,sdfs,gsdf,aac\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "'aac,assa,gsdf,sdfs'"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def sort(str):\n",
    "    arr=str.split(',')\n",
    "    arr=sorted(arr)\n",
    "    return ','.join(arr)\n",
    "s=input(\"Enter the comma sepated elements\")\n",
    "sort(s)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter the comma sepated elementshello,world,welcome\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "'hello,welcome,world'"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#2.sorting \n",
    "def sort(str):\n",
    "    arr=str.split(',')\n",
    "    arr=sorted(arr)\n",
    "    return ','.join(arr)\n",
    "s=input(\"Enter the comma sepated elements\")\n",
    "sort(s)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Union: {1, 2, 3, 4, 5, 6, 7, 8, 9}\n",
      "Intersection: {9, 4, 5}\n",
      "Difference: {1, 2, 3}\n",
      "Symmetric Difference: {1, 2, 3, 6, 7, 8}\n"
     ]
    }
   ],
   "source": [
    "#3.set operations\n",
    "a={1,2,3,4,5,9}\n",
    "b={4,5,6,7,8,9}\n",
    "print(\"Union:\",a|b)\n",
    "print(\"Intersection:\",a&b)\n",
    "print(\"Difference:\",a-b)\n",
    "print(\"Symmetric Difference:\",a^b)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[12, 34, 23, 45, 66, 200]\n"
     ]
    }
   ],
   "source": [
    "#5.Duplicate entriesdef duplicate(x):\n",
    "    return list(dict.fromkeys(x))\n",
    "li=[12,34,23,12,34,45,66,200,34]\n",
    "li=list(dict.fromkeys(li))\n",
    "print(li)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[5, 8, 9]\n"
     ]
    }
   ],
   "source": [
    "#4.Missing numbers\n",
    "def find(li):\n",
    "    return [x for x in range(li[0],li[-1]+1)if x not in li]\n",
    "ls=[1,2,3,4,6,7,10]\n",
    "print(find(ls))\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter email\n",
      "omkarlondhe@gmail.com\n",
      "gmail\n"
     ]
    }
   ],
   "source": [
    "#1.Email \n",
    "mail=input(\"Enter email\\n\")\n",
    "start=mail.index(\"@\")\n",
    "end=mail.index(\".\")\n",
    "data=''\n",
    "for i in range(start+1,end):\n",
    "    data +=mail[i]\n",
    "print(data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
